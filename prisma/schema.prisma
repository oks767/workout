generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  email       String        @unique
  name        String
  password    String
  image       String[]
  exerciseLog ExerciseLog[]
  workoutLog  WorkoutLog[]
}

model Exercise {
  id            Int          @id @default(autoincrement())
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  iconPath      String       @map("icon_path")
  name          String       @unique
  times         Int
  workouts      Workout[]
  exerciseLog   ExerciseLog? @relation(fields: [exerciseLogId], references: [id])
  exerciseLogId Int?
  WorkoutLog    WorkoutLog?  @relation(fields: [workoutLogId], references: [id])
  workoutLogId  Int?
}

model Workout {
  id         Int          @id @default(autoincrement())
  createdAt  DateTime     @default(now()) @map("created_at")
  updatedAt  DateTime     @updatedAt @map("updated_at")
  name       String       @unique
  exercise   Exercise[]
  workoutLog WorkoutLog[]
}

model ExerciseLog {
  id           Int            @id @default(autoincrement())
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  times        ExerciseTime[]
  isCompleted  Boolean        @default(false) @map("is_completed")
  user         User?          @relation(fields: [userId], references: [id])
  userId       Int?           @map("user_id")
  workoutLog   WorkoutLog?    @relation(fields: [workoutLogId], references: [id])
  workoutLogId Int?           @map("workout_log_id")
  exercise     Exercise[]

  @@map("Exercise_log")
}

model ExerciseTime {
  id            Int          @id @default(autoincrement())
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  weight        Int
  repeat        Int
  isCompleted   Boolean      @default(false) @map("is_completed")
  ExerciseLog   ExerciseLog? @relation(fields: [exerciseLogId], references: [id])
  exerciseLogId Int?         @map("exercise_log_id")
  workoutLog    WorkoutLog?  @relation(fields: [workoutLogId], references: [id])
  workoutLogId  Int?

  @@map("Exercise_time")
}

model WorkoutLog {
  id          Int            @id @default(autoincrement())
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")
  times       ExerciseTime[]
  isCompleted Boolean        @default(false) @map("is_completed")
  exerciseLog ExerciseLog[]
  user        User?          @relation(fields: [userId], references: [id])
  userId      Int?
  workout     Workout?       @relation(fields: [workoutId], references: [id])
  workoutId   Int?
  exercises   Exercise[]

  @@map("Workout_log")
}
